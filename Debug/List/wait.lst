###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           04/Dec/2018  11:06:30
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Ahmed\Desktop\Project 10- New Approach\Project 10\wait.c
#    Command line  =  
#        -f C:\Users\Ahmed\AppData\Local\Temp\EW7061.tmp
#        ("C:\Users\Ahmed\Desktop\Project 10- New Approach\Project 10\wait.c"
#        -lC "C:\Users\Ahmed\Desktop\Project 10- New Approach\Project
#        10\Debug\List" -o "C:\Users\Ahmed\Desktop\Project 10- New
#        Approach\Project 10\Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --debug -D__MSP430FR5994__ -e --double=32
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small -On
#        --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Ahmed\Desktop\Project 10- New Approach\Project
#        10\Debug\List\wait.lst
#    Object file   =  
#        C:\Users\Ahmed\Desktop\Project 10- New Approach\Project
#        10\Debug\Obj\wait.r43
#
###############################################################################

C:\Users\Ahmed\Desktop\Project 10- New Approach\Project 10\wait.c
      1          //===========================================================================
      2          // File Name : wait.c
      3          //
      4          // Description: This file contains functions that provide delays
      5          //
      6          // Author: Ahmed Al Mahrooqi
      7          // Date: October 2018
      8          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (7.12.1)
      9          //===========================================================================
     10          
     11          
     12          #include  "msp430.h"
     13          #include  "functions.h"
     14          #include  <string.h>
     15          #include  "macros.h"
     16          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          volatile unsigned int wait_counter = RESET_STATE;
   \                     wait_counter:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile unsigned int wait_counter_5ms = RESET_STATE;
   \                     wait_counter_5ms:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          volatile unsigned int wait_case;
   \                     wait_case:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          volatile unsigned int wait_case_5ms=RESET_VALUE;
   \                     wait_case_5ms:
   \   000000                DS8 2
     21          extern volatile unsigned int er_stop;
     22          
     23          
     24          
     25          

   \                                 In  segment CODE, align 2
     26          void wait_5ms(int duration){                //duration=1 is 5 ms
   \                     wait_5ms:
     27          // function to provide delay
     28            
     29            wait_case_5ms = TRUE;
   \   000000   9243....     MOV.W   #0x1, &wait_case_5ms
     30            wait_counter_5ms = RESET_STATE;
   \   000004   8243....     MOV.W   #0x0, &wait_counter_5ms
     31          
     32             while(ALWAYS) 
     33            {
     34              if(wait_counter_5ms >= duration)
   \                     ??wait_5ms_0:
   \   000008   829C....     CMP.W   R12, &wait_counter_5ms
   \   00000C   FD2B         JNC     ??wait_5ms_0
     35              {
     36                 wait_counter_5ms = RESET_STATE;
   \   00000E   8243....     MOV.W   #0x0, &wait_counter_5ms
     37                 wait_case = RESET_STATE; 
   \   000012   8243....     MOV.W   #0x0, &wait_case
     38                 break;
     39              }
     40             } 
     41          
     42          }
   \   000016   1001         RETA
     43          

   \                                 In  segment CODE, align 2
     44          void wait_100ms(int duration){                //duration=1 is 100 ms
   \                     wait_100ms:
     45          // function to provide delay
     46            int time_to_wait = duration *TIME_SCALE;
   \   000000   0F4C         MOV.W   R12, R15
   \   000002   0F5F         RLA.W   R15
     47            
     48            wait_case = TRUE;
   \   000004   9243....     MOV.W   #0x1, &wait_case
     49            wait_counter = RESET_STATE;
   \   000008   8243....     MOV.W   #0x0, &wait_counter
     50          
     51             while(!er_stop){
   \                     ??wait_100ms_0:
   \   00000C   8293....     CMP.W   #0x0, &er_stop
   \   000010   0820         JNE     ??wait_100ms_1
     52               
     53              if(wait_counter >= time_to_wait){
   \   000012   829F....     CMP.W   R15, &wait_counter
   \   000016   FA2B         JNC     ??wait_100ms_0
     54                 wait_counter = RESET_STATE;
   \   000018   8243....     MOV.W   #0x0, &wait_counter
     55                 wait_case = RESET_STATE; 
   \   00001C   8243....     MOV.W   #0x0, &wait_case
   \   000020   F53F         JMP     ??wait_100ms_0
     56               }
     57              
     58             }
     59             er_stop=RESET_VALUE;
   \                     ??wait_100ms_1:
   \   000022   8243....     MOV.W   #0x0, &er_stop
     60          
     61          }
   \   000026   1001         RETA

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   wait_100ms
      4   wait_5ms


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      40  wait_100ms
      24  wait_5ms
       2  wait_case
       2  wait_case_5ms
       2  wait_counter
       2  wait_counter_5ms

 
 64 bytes in segment CODE
  8 bytes in segment DATA16_Z
 
 64 bytes of CODE memory
  8 bytes of DATA memory

Errors: none
Warnings: none
